SVG: title-page.svg
---
# About GPUs

* It is a specialized electronic circuit designed to rapidly manipulate and alter memory to accelerate the creation of images in a frame buffer intended for output to a display device. Wikipedia.

SVG: gpu-image.svg
---
* They are becoming increasingly general purpose processors that can run programs (shaders).
* They are highly threaded and typically use SIMD to operate on multiple inputs at the same time.
* Still contain fixed function pieces for graphics-specific functions:
  * Texture sampling
  * Primitive assembly
  * etc
---
# Linux graphics stack
---
SVG: stack.svg
---
# Graphics APIs
---
!## OpenGL
SVG: opengl.svg
---
* OpenGL 1.0 was released in January 1992 by Silicon Graphics (SGI).
* Based around SGI hardware of the time which had very fixed functionality.
* Eg, explicit API to draw a triangle with a colour:

```
/* Set a blue colour */
glColor3f(0.0f, 0.0f, 1.0f);
/* Draw a triangle, describing its points */
glBegin(GL_TRIANGLES);
 glVertex3f(0.0f,1.0f,0.0f);
 glVertex3f(-1.0f,-1.0f,0.0f);
 glVertex3f(1.0f,-1.0f,0.0f);
glEnd();
---
* In 2004 OpenGL 2.0 was released.
* Introduced the concept of shaders.
* Can now influence the rendering with programs called shaders.
* Eg, choose a colour programatically:

```
#include short-shader.frag
```
---
* In later versions of GL more and more functionality is moved into the programmable shaders.
* Much more programmable, much less fixed-function.
* Inputs are more often given in buffers rather than via API calls.
* Eg, vertex data now in a buffer:

SVG: vertex-buffer.svg
---
### OpenGL ES

* Simplified version of OpenGL targetting embedded devices.
* Removes most of the legacy cruft and things that are hard to implement in hardware.
* Is increasingly similar to modern versions of OpenGL which also try to deprecate old functionality.
---
!## Vulkan
SVG: vulkan.svg
---
* Vulkan 1.0 released in 2016
* Clean break from legacy OpenGL
* Much less driver overhead
* Everything is specified in buffers
* The application has the responsibility to manage buffers and synchronisation.
* Harder to use but allows applications to exploit the hardware better
* Suitable for both embedded and desktop hardware
---
!# Mesa
SVG: mesa.svg
---
* Open-source implementation of the OpenGL and Vulkan specifications for a variety of hardware on user-space as a library.
* The Mesa project was originally started by Brian Paul.
  * Version 1.0 released in February 1995.
  * Originally used only software rendering
  * Now has support for many different hardware devices
  * Current version is 18.0.
---
* There are drivers for:
  * Intel (i965, i915, anv)
  * AMD (radv, radeonsi, r600)
  * NVIDIA (nouveau)
  * Imagination Technologies (imx)
  * Broadcom (vc4, vc5)
  * Qualcomm (freedreno)
  * Software renderers (classic swrast, softpipe, llvmpipe, OpenSWR)
  * VMware virtual GPU
  * Etc
---
* Supports:
  * OpenGL 4.6
  * OpenGL ES 3.2
  * Vulkan 1.1
* All are the latest versions
* Caveat: not all drivers support the latest version
---
SVG: mesamatrix.svg
---
# Architecture of Mesa
---
SVG: mesa-architecture.svg
---
* Mesa has a loader that selects the driver by asking for the vendor id, chip id... from the kernel driver via DRM.
* There is a map of PCI IDs and user-space Mesa drivers.
* When it is found, Mesa loads the respective driver and sees if the driver succeeds
* In case of failure, the loader tries software renderers.
* It is possible to force software renderer
  * LIBGL ALWAYS SOFTWARE=1
---
* The GL API is filtered through the Mesa state tracker into a simpler set of callbacks into the driver.
  * This handles many things such as GLâ€™s weird object management.
  * Unifies different APIs from different versions of GL.
* For the i965 Intel driver, these callbacks are handled directly.
* For most other drivers, Gallium is used as an extra layer.
  * This handles even more state tracking such as caching state objects.
  * Drivers have even less code to implement.
---
## Compiler architecture
---
SVG: compiler-architecture.svg
---
### GLSL example

```
#include glsl-example.frag
```
---
### GLSL IR

```
#include glsl-output.txt
```
---
### NIR

```
#include nir-output.txt
```
---
### Intel i965 instruction set

```
#include intel-output.txt
```
---
# Embedded drivers
---
## Freedreno

* For Qualcomm Adreno devices
* Started by Rob Clark in 2012
* Reversed engineered
* Supports GL 3.1 and GLES 3.1
* Continued development by Google and Igalia
---
### Devices

* Phones/Tablets:
  * Nexus 4 (a3xx)
  * Nexus 7 Flo (a3xx)
  * Pixel 3a (a6xx)
* ARM boards:
  * Inforce 6540 (a4xx)
  * Inforce 6640 (a5xx)
  * bSTem (a3xx)
  * apq8074 dragonboard (a3xx)

SVG: freedreno-devices.svg
---
## vc4

* For Broadcom VideoCore IV GPUs
* Used in the Raspberry Pi 3
* Written by Eric Anholt while working at Broadcom
* Developed using the released docs from Broadcom
* Supports OpenGL ES 3.1
* Under continued development including by Igalia
---
## vc3d

* Project to create a driver for the VideoCore VI GPU in the Rasperry Pi 4
* Also Started by Eric Anholt
* Being continued by Igalia

SVG: rpi-ci.svg
---
## Panfrost

* For ARM Mali Txxx (Midgard) and Gxx (Bifrost) GPUs
* Used in Chromebooks
* Started by Alyssa Rosenzweig
* Reverse engineered
* Merged into Mesa master
* ARM is now contributing to it too
* Demo from XDC 2019 shows running desktop GL 2.0
* They are looking to support GL 3.0 and Vulkan
---
SVG: panfrost.svg
---
# Thanks

## Questions?
